name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: zero-to-prod-app
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov flake8
        
    - name: Run linter
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run basic tests
      run: |
        cd app
        python -c "import app; print('App imports successfully')"
        python -c "
        from app import app
        with app.test_client() as client:
            response = client.get('/health')
            assert response.status_code == 200
            print('Health check passed')
            
            response = client.get('/')
            assert response.status_code == 200
            print('Homepage check passed')
        "

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Trivy vulnerability scanner (table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities for demo purposes

  build-and-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .
        docker tag ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} ${{ env.DOCKER_IMAGE_NAME }}:latest
        
    - name: Test Docker image
      run: |
        # Start the container
        docker run -d --name test-app -p 8000:8000 ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
        
        # Wait for the app to start
        sleep 10
        
        # Test endpoints
        curl -f http://localhost:8000/health || exit 1
        curl -f http://localhost:8000/ || exit 1
        curl -f http://localhost:8000/metrics || exit 1
        
        # Check if metrics contain expected data
        if ! curl -s http://localhost:8000/metrics | grep -q "flask_requests_total"; then
          echo "Metrics endpoint doesn't contain expected metrics"
          exit 1
        fi
        
        echo "All endpoint tests passed!"
        
        # Stop the container
        docker stop test-app
        docker rm test-app
        
    - name: Test Prometheus config
      run: |
        # Download promtool
        wget https://github.com/prometheus/prometheus/releases/download/v2.45.0/prometheus-2.45.0.linux-amd64.tar.gz
        tar xzf prometheus-2.45.0.linux-amd64.tar.gz
        
        # Check Prometheus config
        ./prometheus-2.45.0.linux-amd64/promtool check config prometheus/prometheus.yml
        
    - name: Test backup script
      run: |
        # Create a test container to run backup script
        docker run --rm -v $(pwd):/workspace -w /workspace ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} python backup/backup_script.py backup
        
        # Check if backup was created
        if [ ! -f backup/data_backup_*.json ]; then
          echo "Backup script test failed - no backup file created"
          exit 1
        fi
        
        echo "Backup script test passed!"

  deploy:
    name: Deploy (Simulation)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Simulate deployment
      run: |
        echo "ðŸš€ Simulating deployment to production..."
        echo "âœ… Docker image: ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}"
        echo "âœ… All tests passed"
        echo "âœ… Security scan completed"
        echo "âœ… Ready for production deployment!"
        
        # In a real scenario, you would:
        # - Push to container registry
        # - Deploy to Kubernetes/ECS/etc.
        # - Update infrastructure
        # - Run smoke tests
        
    - name: Create deployment summary
      run: |
        echo "## Deployment Summary ðŸš€" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Ready for production" >> $GITHUB_STEP_SUMMARY
